const axios = require("axios");
module.exports.config = {
	name: "check",
	version: "0.0.1-beta",
	hasPermssion: 0,
	credits: "chom",
	description: "Ki·ªÉm tra th√¥ng tin",
	commandCategory: "Nh√≥m",
	usages: "check",
	cooldowns: 5,
    dependencies: {
        "axios": "",
        "fs-extra": ""
    }
};

module.exports.run = async ({ args, api, event, Currencies, client, Threads, Users }) => {
   const { threadID, senderID, messageID, type, mentions } = event;
   const moment = require("moment-timezone");
    var timeNow = moment.tz("Asia/Ho_Chi_Minh").format("HH:mm:ss")
   if (args.length == 0) return api.sendMessage(`=== B·∫°n c√≥ th·ªÉ d√πng ===\n--------\n[‚öúÔ∏è] => check checkpoint => L·ªçc th√†nh vi√™n b·ªã bay acc kh·ªèi nh√≥m\n--------\n[‚öúÔ∏è] => check del => L·ªçc th√†nh vi√™n kh·ªèi nh√≥m theo s·ªë tin nh·∫Øn\n--------\n[‚öúÔ∏è] => check online => Xem th·ªùi gian ho·∫°t ƒë·ªông bot online \n--------\n[‚öúÔ∏è] => check tuongtac => Check ƒë·ªô t∆∞∆°ng t√°c c·ªßa b·∫°n\n--------\n[‚öúÔ∏è] => check thread => L·ªçc nh√≥m d∆∞·ªõi 30 th√†nh vi√™n\n--------\n[‚öúÔ∏è] => check all => Check t·∫•t c·∫£ ƒë·ªô t∆∞∆°ng t√°c c√°c th√†nh vi√™n trong box\n[‚öúÔ∏è] => check user => L·ªçc c√° \n--------\n[‚öúÔ∏è] => check covid => Xem th√¥ng tin covid\n--------\n[‚öúÔ∏è] => check luckymayman => Xem T·ªâ l·ªá % may m·∫Øn c·ªßa b·∫°n?\n--------\n\n=== „Äå${timeNow}„Äç ===`, event.threadID, event.messageID);
    var arr = [];
    var mention = Object.keys(event.mentions);
    const data = await api.getThreadInfo(event.threadID);
    if (args[0] == "checkpoint") {// kick ng∆∞·ªùi d√πng fb
      if (permssion < 1) return api.sendMessage("[DONATE]‚Üí Momo/Mbbank: 0332413262. Lazy_Project", threadID, messageID);
    var { userInfo, adminIDs } = await api.getThreadInfo(event.threadID);    
    var success = 0, fail = 0;
    var arr = [];
    for (const e of userInfo) {
        if (e.gender == undefined) {
            arr.push(e.id);
        }
    };

    adminIDs = adminIDs.map(e => e.id).some(e => e == api.getCurrentUserID());
    if (arr.length == 0) {
        return api.sendMessage("Trong nh√≥m b·∫°n kh√¥ng t·ªìn t·∫°i 'Ng∆∞·ªùi d√πng Facebook'.", event.threadID);
    }
    else {
        api.sendMessage("Nh√≥m b·∫°n hi·ªán c√≥ " + arr.length + " 'Ng∆∞·ªùi d√πng Facebook'.", event.threadID, function () {
            if (!adminIDs) {
                api.sendMessage("Nh∆∞ng bot kh√¥ng ph·∫£i l√† qu·∫£n tr·ªã vi√™n n√™n kh√¥ng th·ªÉ l·ªçc ƒë∆∞·ª£c.", event.threadID);
            } else {
                api.sendMessage("B·∫Øt ƒë·∫ßu l·ªçc..", event.threadID, async function() {
                    for (const e of arr) {
                        try {
                            await new Promise(resolve => setTimeout(resolve, 1000));
                            await api.removeUserFromGroup(parseInt(e), event.threadID);   
                            success++;
                        }
                        catch {
                            fail++;
                        }
                    }
                  
                    api.sendMessage("ƒê√£ l·ªçc th√†nh c√¥ng " + success + " ng∆∞·ªùi.", event.threadID, function() {
                        if (fail != 0) return api.sendMessage("L·ªçc th·∫•t b·∫°i " + fail + " ng∆∞·ªùi.", event.threadID);
                    });
                })
            }
        })
    }
}  else if (args[0] == "del") {// l·ªçc th√†nh vi√™n theo s·ªë tin nh·∫Øn b·∫°n c·∫ßn
      if (event.senderID != 100033478361032) return api.sendMessage(`[DONATE]‚Üí Momo/Mbbank: 0332413262. Lazy_Project`, event.threadID, event.messageID)
    const find = data.adminIDs.find(el => el.id == event.senderID && api.getCurrentUserID());
    if (!find) return api.sendMessage(`[‚öúÔ∏è] => B·∫°n v√† bot c·∫ßn l√† qu·∫£n tr·ªã vi√™n!`,event.threadID);
    if (!args[1]) return api.sendMessage(`[‚öúÔ∏è] => HDSD: check del => s·ªë tin nh·∫Øn c·∫ßn l·ªçc `,event.threadID);
      let storage = [];
        for (const value of data.userInfo) storage.push({"id" : value.id, "name": value.name});
        for (const user of storage) {
            const countMess = (await Currencies.getData(user.id)).exp;
            if (typeof countMess == "undefined") await Currencies.setEXP(mention, parseInt(0))
           // if (countMess ==  undefined) api.removeUserFromGroup(user.id,event.threadID)
            if (countMess <= args[1]) setTimeout(function() { api.removeUserFromGroup(user.id,event.threadID) }, 2000);
        } return;
      
    }else if (args[0] == "covid") {
      const axios_1 = require("axios");
  const moment = require("moment-timezone");
  var time = moment.tz("Asia/Ho_Chi_Minh").format("YYYY");
   let fetchdata = await axios_1.get("https://static.pipezero.com/covid/data.json");
  var jsondata = (await fetchdata.data).total;
  var vn = (await fetchdata.data).overview[6];
  var year = vn.date + '-' + time;
  var world = jsondata.world,
    nhiemtg = world.cases,
    chettg = world.death,
    hoiphuctg = world.recovered,
    //////////////////////////////
    nhiemvn = vn.cases,
    chetvn = vn.death,
    hoiphucvn = vn.recovered,
    dieutrivn = vn.treating,
    //////////////////////////////
    nhiemvn7days = vn.avgCases7day,
    hoiphucvn7days = vn.avgRecovered7day,
    chetvn7days = vn.avgDeath7day,
    //////////////////////////////
    ptchetvn = Math.round((chetvn * 100) / nhiemvn),
    pthoiphucvn = Math.round((hoiphucvn * 100) / nhiemvn),
    ptchettg = Math.round((chettg * 100) / nhiemtg),
    pthoiphuctg = Math.round((hoiphuctg * 100) / nhiemtg),
    pthoiphucvn = pthoiphucvn.toString().split(".")[0],
    ptdieutrivn = (100 - pthoiphucvn - ptchetvn).toString().split(".")[0];
  /////////////////////////////////
  ptchetvn = ptchetvn.toString().split(".")[0];
  pthoiphuctg = pthoiphuctg.toString().split(".")[0];
  ptchettg = ptchettg.toString().split(".")[0];
  return api.sendMessage(
    "====== Th·∫ø Gi·ªõi ======\n" +
    `üò∑ Nhi·ªÖm: ${nhiemtg}\n` +
    `üíö H·ªìi ph·ª•c: ${hoiphuctg} (${pthoiphuctg}%)\n` +
    `üíÄ T·ª≠ vong: ${chettg} (${ptchettg}%)\n` +
    "====== Vi·ªát Nam ======\n" +
    `üò∑ Nhi·ªÖm: ${nhiemvn}\n` +
    `üíâ ƒêang ƒëi·ªÅu tr·ªã: ${dieutrivn} (${ptdieutrivn}%)\n` +
    `üíö H·ªìi ph·ª•c: ${hoiphucvn} (${pthoiphucvn}%)\n` +
    `üíÄ T·ª≠ vong: ${chetvn} (${ptchetvn}%)\n` +
    `ü§® Nhi√™ÃÉm 7 ngaÃÄy: ${nhiemvn7days}\n` +
    `‚ù§ H·ªìi ph·ª•c 7 ngaÃÄy: ${hoiphucvn7days}\n` +
    `‚ò†Ô∏è T·ª≠ vong 7 ngaÃÄy: ${chetvn7days}\n\n` +
    //`Tin t·ª©c: ${news.vietnam}\n` +
    `C·∫≠p nh·∫≠t: ${year}`,
    event.threadID, event.messageID
  );
}
    else   if (args[0] == "user"){
      if (event.senderID != 100033478361032) return api.sendMessage(`[DONATE]‚Üí Momo/Mbbank: 0332413262. Lazy_Project`, event.threadID, event.messageID)
            let number = [];
            let uidAll = await Currencies.getAll(['userID','exp']);
            uidAll.forEach(user => {
            if(user.exp > 1) return;
                Users.delData(user.userID);
                Currencies.delData(user.userID);
                number.push(user.userID);
            })
            return api.sendMessage(`[‚öúÔ∏è] ƒê√£ l·ªçc ${number.length} c√° c·∫£nh.`,threadID);
    }
      else if (args[0] == "thread"){
        if (event.senderID != 100033478361032) return api.sendMessage(`[DONATE]‚Üí Momo/Mbbank: 0332413262. Lazy_Project`, event.threadID, event.messageID)
            //let number = [];
            api.getThreadList(50, null, ["INBOX"], (err, list) => getInfo({ list }))
            api.getThreadList(50, null, ["OTHER"], (err, list) => getInfo({ list }))
            api.getThreadList(50, null, ["PENDING"], (err, list) => getInfo({ list }))
            api.getThreadList(50, null, ["unread"], (err, list) => getInfo({ list }))
            var getInfo = ({ list }) => {
              list.forEach(info => {
                if (info.name == "" || info.participants < 20 || info.imageSrc == null) { 
                  //number.push(info);
                  api.removeUserFromGroup(api.getCurrentUserID(),info.threadID);
                  api.deleteThread(info.threadID, (err) => {
                    Threads.delData(info.threadID)
                    if(err) return console.error(err);
                    });
                }
              })
            }
           return api.sendMessage(`[‚öúÔ∏è] ƒê√£ l·ªçc nh·ªØng nh√≥m kh√¥ng t√™n ho·∫∑c d∆∞·ªõi 30 th√†nh vi√™n.`,threadID)
}

    else if (args[0] == "online") {
      	let time = process.uptime();
	let hours = Math.floor(time / (60 * 60));
	let minutes = Math.floor((time % (60 * 60)) / 60);
	let seconds = Math.floor(time % 60);
      const timeStart = Date.now();
       return api.sendMessage('[‚öúÔ∏è] => ƒêang ki·ªÉm tra k·∫øt n·ªëi vui l√≤ng ch·ªù... !', event.threadID, (err, info) => {
    setTimeout(() => {
      api.sendMessage(`[‚öúÔ∏è] => Ping: ${(Date.now() - timeStart)}ms\n[‚öúÔ∏è] => Th·ªùi gian bot ho·∫°t ƒë·ªông: ${hours}:${minutes}:${seconds}`, event.threadID, event.messageID);
    }, 200);
  }, event.messageID);
} else if (args[0] == "lucky") {
const request = global.nodemodule["request"];
    const fs = global.nodemodule["fs-extra"];
    var tile = Math.floor(Math.random() * 101); 
    var link = ["https://i.imgur.com/gWACvcO.jpg",
    "https://i.imgur.com/mpHit7i.jpg",
    "https://i.imgur.com/glHFetf.jpg",
    "https://i.imgur.com/CxwzNMv.png",
    "https://i.imgur.com/RVerKnc.jpg"
    ];
var callback = () => api.sendMessage({body:`[‚öúÔ∏è] T·ªâ l·ªá may m·∫Øn c·ªßa b·∫°n l√† ${tile}%`, attachment: fs.createReadStream(__dirname + "/cache/tile.jpg")}, event.threadID, () => fs.unlinkSync(__dirname + "/cache/tile.jpg")); 
       return request(encodeURI(link[Math.floor(Math.random() * link.length)])).pipe(fs.createWriteStream(__dirname+"/cache/tile.jpg")).on("close",() => callback());
 }
      else if (args[0] == "luotdung") {
    var usages = JSON.parse(require("fs").readFileSync(__dirname + '/../../includes/handle/usages.json'));
    if (args[1] == "all") {
      let storage = [], sl = [];
      for (const value of data.userInfo) storage.push({ "id": value.id, "name": value.name });
      let getDay = require("moment-timezone").tz("Asia/Ho_Chi_Minh").day();
      for (const user of storage) {
        if (!(user.id in usages)) usages[user.id] = {
          day: getDay,
          usages: 30
        }
        sl.push({ "name": user.name, "sl": (typeof usages[user.id].usages == "undefined") ? 0 : usages[user.id].usages, "uid": user.id });
      }
      sl.sort((a, b) => {
        if (a.sl > b.sl) return -1;
        if (a.sl < b.sl) return 1;
        if (a.id > b.id) return 1;
        if (a.id < b.id) return -1;
        a.name.localeCompare(b.name, undefined, { numeric: true });
      });
      msg = "[‚öúÔ∏è] Check l∆∞·ª£t d√πng [‚öúÔ∏è]\n";
      let countsl = 0
      for (let e of sl) {
        msg += `\n${countsl += 1}. ${e.name} - ${e.sl} l∆∞·ª£t`
      }
      msg += `\n=> Th·ªùi gian: „Äå${timeNow}„Äç`;
      require("fs").writeFileSync(__dirname + '/../../includes/handle/usages.json', JSON.stringify(usages, null, 4));
      return api.sendMessage(msg, threadID);
    }
    api.sendMessage(`B·∫°n c√≤n ${usages[senderID].usages} l∆∞·ª£t d√πng Bot`, threadID, messageID);	
    }
 else if (args[0] == "all") {
      let threadInfo = await api.getThreadInfo(event.threadID);
        let number = 0, msg = "", storage = [], exp = [];
        for (const value of data.userInfo) storage.push({"id" : value.id, "name": value.name});
        for (const user of storage) {
            const countMess = await Currencies.getData(user.id);
            if (user.name != null) exp.push({"name" : user.name, "exp": (typeof countMess.exp == "undefined") ? 0 : countMess.exp});
        }
        exp.sort((a, b) => {
            if (a.exp > b.exp) return -1;
            if (a.exp < b.exp) return 1;
        });
         let rank = exp.findIndex(info => parseInt(info.uid) == parseInt(`${(event.type == "message_reply") ? event.messageReply.senderID : event.senderID}`)) + 1;
        let infoUser = exp[rank - 1];
        for (const lastData of exp) {
            number++;
            msg += `„Äé${number}„Äè: ${(lastData.name) == null || undefined  ? "Kh√¥ng t√™n" : lastData.name} v·ªõi ${lastData.exp} tin nh·∫Øn \n`;
        }
        return api.sendMessage(`==„ÄåKI·ªÇM TRA T∆Ø∆†NG T√ÅC„Äç==\n\n` + msg +`\n¬ª üíπT·ªâ l·ªá t∆∞∆°ng t√°c: ${(exp[rank].exp).toFixed(0)}%\n¬ª üí¨ T·ªïng s·ªë tin nh·∫Øn: ${threadInfo.messageCount}\n    === „Äå${timeNow}„Äç ===`, threadID, messageID);
    }
    
    else if (args[0] == "tuongtac") {
        let storage = [], exp = [];
        for (const value of data.userInfo) storage.push({"id" : value.id, "name": value.name});
        for (const user of storage) {
            const countMess = await Currencies.getData(user.id);
            exp.push({"name" : user.name, "exp": (typeof countMess.exp == "undefined") ? 0 : countMess.exp, "uid": user.id});
        }
        exp.sort((a, b) => {
            if (a.exp > b.exp) return -1;
            if (a.exp < b.exp) return 1;
            if (a.id > b.id) return 1;
		    if (a.id < b.id) return -1;
        });
        let rank = exp.findIndex(info => parseInt(info.uid) == parseInt(`${(event.type == "message_reply") ? event.messageReply.senderID : event.senderID}`)) + 1;
        let infoUser = exp[rank - 1];
        return api.sendMessage(`\n¬ª B·∫°n`+` ƒë·ª©ng h·∫°ng ${rank} v·ªõi ${infoUser.exp} tin nh·∫Øn\n¬ª üë§T√™n: ${infoUser.name}\n¬ª ‚¨õH·∫°ng: ${rank} \n¬ª üí¨Tin nh·∫Øn: ${infoUser.exp}\n¬ª üèÜRank: ${rank + 1}\n¬ª üíπT·ªâ l·ªá t∆∞∆°ng t√°c: ${(exp[rank].exp).toFixed(0)}%\n¬ª ‚è∞Time: ${timeNow}`, event.threadID,event.messageID);
    }
  else if (args[0] == "()") {
        let storage = [], exp = [];
        for (const value of data.userInfo) storage.push({"id" : value.id, "name": value.name});
        for (const user of storage) {
            const countMess = await Currencies.getData(user.id);
            exp.push({"name" : user.name, "exp": (typeof countMess.exp == "undefined") ? 0 : countMess.exp, "uid": user.id});
        }
        exp.sort((a, b) => {
            if (a.exp > b.exp) return -1;
            if (a.exp < b.exp) return 1;
            if (a.id > b.id) return 1;
		    if (a.id < b.id) return -1;
        });
        let rank = exp.findIndex(info => parseInt(info.uid) == parseInt(`${(event.type == "message_reply") ? event.messageReply.senderID : event.senderID}`)) + 1;
        let infoUser = exp[rank - 1];
        return api.sendMessage(`\n¬ª B·∫°n`+` ƒë·ª©ng h·∫°ng ${rank} v·ªõi ${infoUser.exp} tin nh·∫Øn\n¬ª üë§T√™n: ${infoUser.name}\n¬ª ‚¨õH·∫°ng: ${rank} \n¬ª üí¨Tin nh·∫Øn: ${infoUser.exp}\n¬ª üèÜRank: ${rank + 1}\n¬ª üíπT·ªâ l·ªá t∆∞∆°ng t√°c: ${(exp[rank].exp).toFixed(0)}%\n¬ª ‚è∞Time: ${timeNow}`, event.threadID,event.messageID);
    }
}
