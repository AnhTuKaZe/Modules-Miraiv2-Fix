
module.exports.config = {
  name: "command",
  version: "0.0.1",
  hasPermssion: 1,
  credits: "chom",
  description: "xem th√¥ng tin v·ªÅ bot",
  commandCategory: "ti·ªán √≠ch",
  usages: "",
  cooldowns: 0
};

const totalPath = __dirname + '/cache/totalChat.json';
const _24hours = 86400000;
const fs = require("fs-extra");
function handleByte(byte) {
	const units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

	let i = 0, usage = parseInt(byte, 10) || 0;

	while(usage >= 1024 && ++i){
		usage = usage/1024;
	}
  
	return(usage.toFixed(usage < 10 && i > 0 ? 1 : 0) + ' ' + units[i]);
}

function handleOS(ping) {
	var os = require("os");
	var cpus = os.cpus();
	var speed, chips;
	for (var i of cpus) chips = i.model, speed = i.speed;
	if (cpus == undefined) return;
	else return msg = 
	`üìå Ping: ${Date.now() - ping}ms.\n\n`;

}
module.exports.onLoad = function() {
    const { writeFileSync, existsSync } = require('fs-extra');
    const { resolve } = require("path");
    const path = resolve(__dirname, 'cache', 'data.json');
    if (!existsSync(path)) {
        const obj = {
            adminbox: {}
        };
        writeFileSync(path, JSON.stringify(obj, null, 4));
    } else {
        const data = require(path);
        if (!data.hasOwnProperty('adminbox')) data.adminbox = {};
        writeFileSync(path, JSON.stringify(data, null, 4));
    }
}
module.exports.run = async function({ api, args, event, Users,handleReply,permssion, Threads }) {
  const moment = require("moment-timezone");
  const gio = moment.tz("Asia/Ho_Chi_Minh").format("HH");
    var phut = moment.tz("Asia/Ho_Chi_Minh").format("mm");
    var giay = moment.tz("Asia/Ho_Chi_Minh").format("ss");
  const axios = require("axios")
  const fs = require('fs-extra');
  const request = require('request')
  const { threadID, messageID, senderID } = event;
   return api.sendMessage({body: `====[ ADMIN ]====\n[1] Ch·∫°y l·∫°i h·ªá th·ªëng BOT\n[2] Reload config\n[3] C·∫≠p nh·∫≠t d·ªØ li·ªáu c√°c box\n[4] C·∫≠p nh·∫≠t d·ªØ li·ªáu ng∆∞·ªùi d√πng\n[5] ƒêƒÉng xu·∫•t t√†i kho·∫£n Facebook\n====[ QU·∫¢N TR·ªä VI√äN ]====\n[6] B·∫Øt t·∫Øt ch·∫ø ƒë·ªô ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi s·ª≠ d·ª•ng ƒë∆∞·ª£c BOT\n[7] B·∫≠t t·∫Øt ch·∫ø ƒë·ªô c·∫•m ng∆∞·ªùi d√πng v√†o box\n[8] B·∫≠t t·∫Øt ch·∫ø ƒë·ªô ch·ªëng c∆∞·ªõp box\n[9] B·∫≠t t·∫Øt ch·∫ø ƒë·ªô Antiout\n[10] Kick ng∆∞·ªùi d√πng Facebook\n====[ NG∆Ø·ªúI D√ôNG ]====\n[11] Xem th√¥ng tin v·ªÅ BOT\n[12] Xem th√¥ng tin box\n[13] Xem danh s√°ch qu·∫£n tr·ªã vi√™n nh√≥m\n[14] Xem s√°ch Admin\n[15] Xem danh s√°ch nh√≥m\n[16] Prefix\n[17] Language\n-----------\nüëâ Ph·∫£n h·ªìi tin nh·∫Øn n√†y theo s·ªë m√† b·∫°n ch·ªçn\n\n`
        }, threadID, (error, info) => {
            global.client.handleReply.push({
               name: this.config.name,
                    messageID: info.messageID,
                    author: event.senderID,
                    type: "choosee",
            })
        }, event.messageID)
}
module.exports.handleReply = async function({
  args, event, Users,Threads, api, handleReply, permssion
}) {
  const { threadID, messageID, senderID } = event;
  switch (handleReply.type) {
    case "choosee": {
      switch (event.body) {
        case "1": {
             const permission = ["100045609437771"];
             if (!permission.includes(event.senderID))
             return api.sendMessage("Xin c√°i tu·ªïi ƒë·ªÉ reset?", event.threadID, event.messageID);
 

	const { threadID, messageID } = event;
	return api.sendMessage(`„ÄäRestarted successfully„Äã`, threadID, () => process.exit(1));
}break;
         case "2": {
           const permission = ["100045609437771"];
             if (!permission.includes(event.senderID))
             return api.sendMessage("Quy·ªÅn l·ªìn bi√™n gi·ªõi?", event.threadID, event.messageID);
           const listAdmin = global.config.ADMINBOT[0];
    if (senderID != listAdmin) return api.sendMessage("done -_-", threadID, messageID);
          delete require.cache[require.resolve(global.client.configPath)];
global.config = require(global.client.configPath);
return api.sendMessage("ƒê√£ reload th√†nh c√¥ng config.json", event.threadID, event.messageID);    
}break;
        case "3": {
          const permission = ["100045609437771"];
             if (!permission.includes(event.senderID))
             return api.sendMessage("Quy·ªÅn l·ªìn bi√™n gi·ªõi?", event.threadID, event.messageID);
          const { threadID } = event;
const { setData, getData } = Threads;
var inbox = await api.getThreadList(100, null, ['INBOX']);
  let list = [...inbox].filter(group => group.isSubscribed && group.isGroup);
  const lengthGroup = list.length
  for (var groupInfo of list) {
    console.log(`ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu c·ªßa box ID: ${groupInfo.threadID}`)
    var threadInfo = await api.getThreadInfo(groupInfo.threadID);
    threadInfo.threadName;
    await Threads.setData(groupInfo.threadID, { threadInfo });
  }
    console.log(`ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu c·ªßa ${lengthGroup} box`)
    return api.sendMessage(`ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu c·ªßa ${lengthGroup} box`, threadID)
}break;
        case "4": {
          if (event.senderID != 100045609437771) return api.sendMessage(`Tu·ªïi con c·∫∑c`, event.threadID, event.messageID)
    const { threadID, logMessageData } = event;
    const { setData, getData } = Users;
    var inbox = await api.getThreadList(100, null, ['INBOX']);
    let list = [...inbox].filter(group => group.isSubscribed && group.isGroup);
    for (var groupInfo of list) {
        var { participantIDs } = await Threads.getInfo(groupInfo.threadID) || await api.getThreadInfo(groupInfo.threadID);
        for (var id of participantIDs) {
            let data = await api.getUserInfo(id);
            data.name
            let userName = data[id].name
            await Users.setData(id, { name: userName, data: {} });
            console.log(`ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu c·ªßa ID: ${id}`)
        }
    }
    console.log(`Update successful!`)
    return api.sendMessage(`Successfully updated all user data!`, threadID)
}break;        
        case "5": {
          const fs = global.nodemodule["fs-extra"];
  const permission = ["100045609437771"];

	if (!permission.includes(event.senderID)) return api.sendMessage("c√∫t", event.threadID, event.messageID);
api.sendMessage("ƒêang ƒëƒÉng xu·∫•t kh·ªèi Facebook...",event.threadID,event.messageID)
api.logout()
}break;
        case "6": {
          const { writeFileSync } = global.nodemodule["fs-extra"];
        const { resolve } = require("path");
        const pathData = resolve(__dirname, 'cache', 'data.json');
        const database = require(pathData);
        const { adminbox } = database;  
        if (adminbox[threadID] == true) {
            adminbox[threadID] = false;
            api.sendMessage("¬ª T·∫Øt th√†nh c√¥ng ch·∫ø ƒë·ªô qu·∫£n tr·ªã vi√™n t·∫•t c·∫£ m·ªçi ng∆∞·ªùi ƒë·ªÅu c√≥ th·ªÉ s·ª≠ d·ª•ng bot üîì", threadID, messageID);
        } else {
            api.sendMessage("¬ª B·∫≠t th√†nh c√¥ng ch·∫ø ƒë·ªô qtvonly (ch·ªâ admin v·ªõi qtv box m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng bot) üîí", threadID, messageID);
            adminbox[threadID] = true;
        }
        writeFileSync(pathData, JSON.stringify(database, null, 4));
}break;
        case "7": {
          const info = await api.getThreadInfo(event.threadID);
    if (!info.adminIDs.some(item => item.id == api.getCurrentUserID())) 
      return api.sendMessage('¬ª Bot c·∫ßn quy·ªÅn qu·∫£n tr·ªã vi√™n nh√≥m', event.threadID, event.messageID);
    const data = (await Threads.getData(event.threadID)).data || {};
    if (typeof data.newMember == "undefined" || data.newMember == false) data.newMember = true;
    else data.newMember = false;
    await Threads.setData(event.threadID, { data });
      global.data.threadData.set(parseInt(event.threadID), data);
    return api.sendMessage(`¬ª ƒê√£ ${(data.newMember == true) ? "b·∫≠t" : "t·∫Øt"} th√†nh c√¥ng c·∫•m ng∆∞·ªùi d√πng v√†o box`, event.threadID, event.messageID);
}break;
        case "8": {
            const info = await api.getThreadInfo(event.threadID);
    if (!info.adminIDs.some(item => item.id == api.getCurrentUserID())) 
      return api.sendMessage('‚ùØ C·∫ßn quy·ªÅn qu·∫£n tr·ªã vi√™n nh√≥m cho bot', event.threadID, event.messageID);
    const data = (await Threads.getData(event.threadID)).data || {};
    if (typeof data["guard"] == "guard" || data["guard"] == false) data["guard"] = true;
    else data["guard"] = false;
    await Threads.setData(event.threadID, { data });
      global.data.threadData.set(parseInt(event.threadID), data);
    return api.sendMessage(`ƒê√£ ${(data["guard"] == true) ? "b·∫≠t" : "t·∫Øt"} th√†nh c√¥ng ch·∫ø ƒë·ªô ch·ªëng c∆∞·ªõp box`, event.threadID, event.messageID);
}break;
          case "9": {
           var info = await api.getThreadInfo(event.threadID);
 let data = (await Threads.getData(event.threadID)).data || {};
 if (typeof data["antiout"] == "undefined" || data["antiout"] == false) data["antiout"] = true;
 else data["antiout"] = false;
 await Threads.setData(event.threadID, { data });
 global.data.threadData.set(parseInt(event.threadID), data);
 return api.sendMessage(`ƒê√£ ${(data["antiout"] == true) ? "b·∫≠t" : "t·∫Øt"} th√†nh c√¥ng antiout!`, event.threadID);
}break;
        case "10": {
          var { userInfo, adminIDs } = await api.getThreadInfo(event.threadID);    
    var success = 0, fail = 0;
    var arr = [];
    for (const e of userInfo) {
        if (e.gender == undefined) {
            arr.push(e.id);
        }
    };

    adminIDs = adminIDs.map(e => e.id).some(e => e == api.getCurrentUserID());
    if (arr.length == 0) {
        return api.sendMessage("Trong nh√≥m b·∫°n kh√¥ng t·ªìn t·∫°i 'Ng∆∞·ªùi d√πng Facebook'.", event.threadID);
    }
    else {
        api.sendMessage("Nh√≥m b·∫°n hi·ªán c√≥ " + arr.length + " 'Ng∆∞·ªùi d√πng Facebook'.", event.threadID, function () {
            if (!adminIDs) {
                api.sendMessage("Nh∆∞ng bot kh√¥ng ph·∫£i l√† qu·∫£n tr·ªã vi√™n n√™n kh√¥ng th·ªÉ l·ªçc ƒë∆∞·ª£c.", event.threadID);
            } else {
                api.sendMessage("B·∫Øt ƒë·∫ßu l·ªçc..", event.threadID, async function() {
                    for (const e of arr) {
                        try {
                            await new Promise(resolve => setTimeout(resolve, 1000));
                            await api.removeUserFromGroup(parseInt(e), event.threadID);   
                            success++;
                        }
                        catch {
                            fail++;
                        }
                    }
                  
                    api.sendMessage("ƒê√£ l·ªçc th√†nh c√¥ng " + success + " ng∆∞·ªùi.", event.threadID, function() {
                        if (fail != 0) return api.sendMessage("L·ªçc th·∫•t b·∫°i " + fail + " ng∆∞·ªùi.", event.threadID);
                    }); 
                  })
            }
        })
    }
}break;
        case "11": {
         const moment = require("moment-timezone");
    const gio = moment.tz("Asia/Ho_Chi_Minh").format("HH");
    var phut = moment.tz("Asia/Ho_Chi_Minh").format("mm");
    var giay = moment.tz("Asia/Ho_Chi_Minh").format("ss");
    const namebot = config.BOTNAME
    const PREFIX = config.PREFIX
    const admin = config.ADMINBOT
    const ndh = config.NDH
    const { commands } = global.client;
    const threadSetting = (await Threads.getData(String(event.threadID))).data || 
    {};
    const prefix = (threadSetting.hasOwnProperty("PREFIX")) ? threadSetting.PREFIX 
    : global.config.PREFIX;
	  var ping = Date.now();
  
    var threadInfo = await api.getThreadInfo(event.threadID);
    var time = process.uptime(),
        hours = Math.floor(time / (60 * 60)),
        minutes = Math.floor((time % (60 * 60)) / 60),
        seconds = Math.floor(time % 60);
	 var severInfo = handleOS(ping);
	 var msg =`‚è∞ B√¢y gi·ªù l√†: ${gio} gi·ªù ${phut} ph√∫t ${giay} gi√¢y\nü§ñ T√™n bot: ${namebot}\n‚è± ƒê√£ Ho·∫°t ƒê·ªông:${hours < 10 ? (hours > 0 ? " 0" + hours + " gi·ªù" : 
   "") : (hours > 0 ? " " + hours + " gi·ªù" : "")} ${minutes < 10 ? (minutes > 0 ? " 0"  + minutes + " ph√∫t" : "") : (minutes > 0 ? " " + minutes + " ph√∫t" : 
 "")}${seconds < 10 ? (seconds > 0 ? " 0" + seconds + " gi√¢y." : "") : (seconds > 0 ? " " + 
 seconds + " gi√¢y." : "")}\n--------------\n` +
	`üë®‚Äçüë®‚Äçüëß‚Äçüë¶ T·ªïng Nh√≥m: ${global.data.allThreadID.length} nh√≥m.\nüë• T·ªïng Ng∆∞·ªùi D√πng: ${global.data.allUserID.length} ng∆∞·ªùi.\n
üë§ Admin bot: ${admin.length}.\n` + 
`üìù T·ªïng S·ªë L·ªánh: ${commands.size }\n--------------\n`+`üåü Prefix h·ªá th·ªëng : ${PREFIX}\nü•Ä Prefix box: ${prefix}\n${severInfo ? severInfo : `üìå Ping: 
${Date.now() - ping}ms.\n\n`}`
    return api.sendMessage(msg, event.threadID)
}break; 
        case "12": {
          const moment = require("moment-timezone");
    const request = require("request")
    var timeNow = moment.tz("Asia/Ho_Chi_Minh").format("HH:mm:ss");
    if (!fs.existsSync(totalPath)) fs.writeFileSync(totalPath, JSON.stringify({}));
    let totalChat = JSON.parse(fs.readFileSync(totalPath));
    let threadInfo = await api.getThreadInfo(event.threadID);
    let timeByMS = Date.now();

    var memLength = threadInfo.participantIDs.length;
    let threadMem = threadInfo.participantIDs.length;
    var nameMen = [];
    var gendernam = [];
    var gendernu = [];
    var nope = [];
    for (let z in threadInfo.userInfo) {
      var gioitinhone = threadInfo.userInfo[z].gender;
      var nName = threadInfo.userInfo[z].name;
      if (gioitinhone == "MALE") {
        gendernam.push(z + gioitinhone)
      } else if (gioitinhone == "FEMALE") {
        gendernu.push(gioitinhone)
      } else {
        nope.push(nName)
      }
    };
    var nam = gendernam.length;
    var nu = gendernu.length;
    let qtv = threadInfo.adminIDs.length;
    let sl = threadInfo.messageCount;
    let u = threadInfo.nicknames;
    let icon = threadInfo.emoji;

    let threadName = threadInfo.threadName;
    let id = threadInfo.threadID;
    let sex = threadInfo.approvalMode;
    var pd = sex == false ? 't·∫Øt' : sex == true ? 'b·∫≠t' : 'Kh';


    if (!totalChat[event.threadID]) {
      totalChat[event.threadID] = {
        time: timeByMS,
        count: sl,
        ytd: 0
      }
      fs.writeFileSync(totalPath, JSON.stringify(totalChat, null, 2));
    }

    let mdtt = "Ch∆∞a c√≥ th·ªëng k√™";
    let preCount = totalChat[event.threadID].count || 0;
    let ytd = totalChat[event.threadID].ytd || 0;
    let hnay = (ytd != 0) ? (sl - preCount) : "Ch∆∞a c√≥ th·ªëng k√™";
    let hqua = (ytd != 0) ? ytd : "Ch∆∞a c√≥ th·ªëng k√™";
    if (timeByMS - totalChat[event.threadID].time > _24hours) {
      if (timeByMS - totalChat[event.threadID].time > (_24hours * 2)) {
        totalChat[event.threadID].count = sl;
        totalChat[event.threadID].time = timeByMS - _24hours;
        totalChat[event.threadID].ytd = sl - preCount;
        fs.writeFileSync(totalPath, JSON.stringify(totalChat, null, 2));
      }
      getHour = Math.ceil((timeByMS - totalChat[event.threadID].time - _24hours) / 3600000);
      if (ytd == 0) mdtt = 100;
      else mdtt = ((((hnay) / ((hqua / 24) * getHour))) * 100).toFixed(0);
      mdtt += "%";
    }
    
    var callback = () =>
      api.sendMessage({
        body: `¬ª T√™n box: ${threadName}\n¬ª ID Box: ${id}\n¬ª Ph√™ duy·ªát: ${pd}\n¬ª Emoji: ${icon}\n¬ª Th√¥ng tin:\n¬ª T·ªïng ${threadMem} th√†nh vi√™n\n¬ª üë®‚Äçü¶∞Nam: ${nam} th√†nh vi√™n \n¬ª üë©‚Äçü¶∞N·ªØ: ${nu} th√†nh vi√™n\n¬ª üïµÔ∏è‚Äç‚ôÇÔ∏èV·ªõi ${qtv} qu·∫£n tr·ªã vi√™n\n¬ª üí¨ T·ªïng: ${sl} tin nh·∫Øn\n¬ª üìà M·ª©c ƒë·ªô t∆∞∆°ng t√°c: ${mdtt}\nüåü T·ªïng s·ªë tin nh·∫Øn h√¥m qua: ${hqua}\nüåü T·ªïng s·ªë tin nh·∫Øn h√¥m nay: ${hnay}\n   === „Äå${timeNow}„Äç ===`,
        attachment: fs.createReadStream(__dirname + '/cache/box.png')
      },
        threadID,
        () => fs.unlinkSync(__dirname + '/cache/box.png')
      );
    return request(encodeURI(`${threadInfo.imageSrc}`))
      .pipe(fs.createWriteStream(__dirname + '/cache/box.png'))
      .on('close', () => callback());
}break;      
       case "13": {
         var threadInfo = await api.getThreadInfo(event.threadID);
    let qtv = threadInfo.adminIDs.length;
    var listad = '';
    var qtv2 = threadInfo.adminIDs;
    dem = 1;
    for (let i = 0; i < qtv2.length; i++) {
        const info = (await api.getUserInfo(qtv2[i].id));
        const name = info[qtv2[i].id].name;
        listad += '' + `${dem++}` + '. ' + name + '\n';
    }

    api.sendMessage(
        `Danh s√°ch ${qtv} qu·∫£n tr·ªã vi√™n g·ªìm:\n ${listad}`,event.threadID,event.messageID)
}break;
        case "14": {
          const { ADMINBOT } = global.config;
           listAdmin = ADMINBOT || config.ADMINBOT ||  [];
            var msg = [];
            for (const idAdmin of listAdmin) {
                if (parseInt(idAdmin)) {
                  const name = (await Users.getData(idAdmin)).name
                    msg.push(`¬ª  ${name}\nLink: fb.me/${idAdmin}`);              
                }
            }
           return api.sendMessage(`======„Äò„ÄéADMIN„Äè„Äô======\n${msg.join("\n")}\n`, event.threadID, event.messageID);
}break;
        case "15": {
            let threadInfo = await api.getThreadInfo(event.threadID);
          var inbox = await 
api.getThreadList(300, null, ["INBOX"]);
  let list = [...inbox].filter(group => group.isSubscribed && group.isGroup);

var abc = "üíå Danh s√°ch bot ƒëang tham gia üíå\n"; let i = 0;
  for (var groupInfo of list) {
    abc += `${i+=1}. ${groupInfo.name}\nüíå ID BOX: ${groupInfo.threadID}\n------------------------------\n`;
  }
  api.sendMessage(abc, event.threadID);
}break;
          case "16":{
					return api.sendMessage("Prefix c·ªßa bot l√† : " + global.config.PREFIX, event.threadID, event.messageID);
            }break;
          case "17": {
					if ("vi" == global.config.language) return api.sendMessage("Ng√¥n ng·ªØ: Ti·∫øng Vi·ªát", event.threadID, messageID);
					"en" == global.config.language && api.sendMessage("Language : English", event.threadID, event.messageID);
            }break;

		}
   }
 }
}


module.exports.handleEvent = async ({ api, event }) => {
  if (!fs.existsSync(totalPath)) fs.writeFileSync(totalPath, JSON.stringify({}));
  let totalChat = JSON.parse(fs.readFileSync(totalPath));
  if (!totalChat[event.threadID]) return;
  if (Date.now() - totalChat[event.threadID].time > (_24hours * 2)) {
    let sl = (await api.getThreadInfo(event.threadID)).messageCount;
    totalChat[event.threadID] = {
      time: Date.now() - _24hours,
      count: sl,
      ytd: sl - totalChat[event.threadID].count
    }
    fs.writeFileSync(totalPath, JSON.stringify(totalChat, null, 2));
  }
}
