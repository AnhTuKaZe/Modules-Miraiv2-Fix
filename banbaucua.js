module.exports.config = {
	name: "banbaucua",
	version: "1.1.4",
	hasPermssion: 0,
	credits: "chom",
	description: "baucua nhi·ªÅu ng∆∞·ªùi",
	commandCategory: "GAME",
	usages: "[create/leave/start]\n[nai/b·∫ßu/g√†/t√¥m/cua/c√°]",
	dependencies: {
		"fs": "",
		"axios": ""
	},
	cooldowns: 3
};

module.exports.languages = {
	"vi": {
        "missingInput": "S·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ho·∫∑c l√† s·ªë √¢m",
        "wrongInput": "Nh·∫≠p li·ªáu kh√¥ng h·ª£p l·ªá?",
        "moneyBetNotEnough": "S·ªë ti·ªÅn b·∫°n ƒë·∫∑t l·ªõn h∆°n ho·∫∑c b·∫±ng s·ªë d∆∞ c·ªßa b·∫°n!",
        "limitBet": "S·ªë coin ƒë·∫∑t kh√¥ng ƒë∆∞·ª£c d∆∞·ªõi 50$!",
        "alreadyHave": "ƒêang c√≥ 1 v√°n b·∫ßu cua di·ªÖn ra ·ªü nh√≥m n√†y!",
        "alreadyBet": "B·∫°n ƒë√£ c∆∞·ª£c v√†o ƒë√¢y t·ª´ tr∆∞·ªõc.",
        "createSuccess": "[ BAUCUA ] T·∫°o th√†nh c√¥ng, d√πng:\nƒê·ªÉ tham gia ƒë·∫∑t c∆∞·ª£c, d√πng:\n%1%2 [nai/b·∫ßu/g√†/t√¥m/cua/c√°] ti·ªÅn_c∆∞·ª£c\n(c√≥ th·ªÉ ƒë·∫∑t nhi·ªÅu con c√πng l√∫c)",
        "noGame": "[ BAUCUA ] Nh√≥m c·ªßa b·∫°n kh√¥ng c√≥ v√°n b·∫ßu cua n√†o ƒëang di·ªÖn ra c·∫£!",
        "betSuccess": "ƒê·∫∑t th√†nh c√¥ng %1 ƒë√¥ v√†o %2",
        "notJoined": "B·∫°n ch∆∞a tham gia b·∫ßu cua ·ªü nh√≥m n√†y!",
        "outSuccess": "ƒê√£ r·ªùi v√°n b·∫ßu cua th√†nh c√¥ng, b·∫°n s·∫Ω ƒë∆∞·ª£c ho√†n ti·ªÅn!",
        "shaking": "ƒêang l·∫Øc...",
        "final": " => [  K·∫æT QU·∫¢  ] <=",
        "notAuthor": "B·∫°n kh·ªìng ph·∫£i ch·ªß ph√≤ng.",
        "unknown": "C√¢u l·ªánh kh√¥ng h·ª£p l·ªá, ƒë·ªÉ xem c√°ch d√πng, s·ª≠ d·ª•ng: %1help %2",
        "noPlayer": "Hi·ªán kh√¥ng c√≥ ng∆∞·ªùi ƒë·∫∑t c∆∞·ª£c",
        "closed": "ƒê√£ ƒë√≥ng v√°n b·∫ßu cua!"
	}
}

module.exports.onLoad = async () => {
	const fs = require("fs");
	await require('axios').get("https://raw.githubusercontent.com/RFS-ADRENO/mirai-modules/main/version.json").then(res => {
		if (res.data["baucua_x022"] != this.config.version) console.log("-BAUCUA ƒê√É C√ì PHI√äN B·∫¢N M·ªöI, LI√äN H·ªÜ DungUwU ƒê·ªÇ ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T-");
	})
	let path = __dirname + '/baucua/';
	if (!fs.existsSync(path)) fs.mkdirSync(path, { recursive: true });
	await require("axios").get("https://raw.githubusercontent.com/RFS-ADRENO/base64_baucua/main/data_baucua.json").then(async (res) => {
		for (let e in res.data) {
			if (fs.existsSync(path + e)) continue;
			await fs.writeFileSync(path + e, res.data[e], 'base64');
		}
	});
	if (!global.client.baucua) global.client.baucua = {};
	console.log("-----BAUCUA LOADED SUCCESSFULLY------");
};


module.exports.run = async function({ api, event, args, getText, Users, Currencies }) {
	if (!global.client.baucua) global.client.baucua = {};
	const { senderID, messageID, threadID } = event;
	const { increaseMoney, decreaseMoney, getData } = Currencies;
    const moneyUser = (await getData(senderID)).money;
	const sendC = (msg, callback) => api.sendMessage(msg, threadID, callback, messageID);
	const sendTC = (msg, callback) => api.sendMessage(msg, threadID, callback);
	const sendT = (msg) => sendTC(msg, () => {});
	const send = (msg) => sendC(msg, () => {});
	const threadSetting = global.data.threadData.get(parseInt(threadID)) || {};
	const prefix = (threadSetting.hasOwnProperty("PREFIX")) ? threadSetting.PREFIX : global.config.PREFIX;
	switch(args[0]) {
		case "create": {
			if (threadID in global.client.baucua) send(getText("alreadyHave"));
			else sendTC(getText("createSuccess", prefix, this.config.name), () => {
				global.client.baucua[threadID] = {
					players: 0,
					data: {},
					status: "pending",
					author: senderID
				};
			});
			return;
		};
		case "leave": {
			if (!global.client.baucua[threadID]) return send(getText("noGame"));
			if (!global.client.baucua[threadID].data[senderID]) return send(getText("notJoined"));
			else {
				global.client.baucua[threadID].players--;
				global.client.baucua[threadID].data[senderID].forEach(async (e) => {
					await increaseMoney(senderID, e.bet);
				})
				delete global.client.baucua[threadID].data[senderID];
				send(getText("outSuccess"));
			}
			return;
		};
		case "start": {
			if (!global.client.baucua[threadID]) return send(getText("noGame"));
			if (global.client.baucua[threadID].author != senderID) return send(getText("notAuthor"));
			if (global.client.baucua[threadID].players == 0) return send(getText("noPlayer"));
			sendTC(getText("shaking"), (err, info) => setTimeout(() => api.unsendMessage(info.messageID), 3000));
			await new Promise(resolve => setTimeout(resolve, 3000));
			let sixC = ["nai","b·∫ßu","g√†","t√¥m","cua","c√°"];
			let sixE = ["ü¶å","üçê","üêì","ü¶ê","ü¶Ä","üêü"];
			let _1st = Math.floor(Math.random() * 6);
			let _2nd = Math.floor(Math.random() * 6);
			let _3rd = Math.floor(Math.random() * 6);
			let ketqua = [sixC[_1st], sixC[_2nd], sixC[_3rd]];
			let name = "", win = 0, lose = 0;
			let bcatm = [];
			for (e of ketqua) {
				let imgStream = require("fs").createReadStream(__dirname + `/baucua/${e}.jpg`);
				bcatm.push(imgStream);
			}
			let msg = "";
			for (i in global.client.baucua[threadID].data) {
				name = await Users.getNameUser(i) || "Player";
				msg += `\n${name}: `;
				global.client.baucua[threadID].data[i].forEach(async (e) => {
					if (!ketqua.includes(e.name)) lose += e.bet;
					else {
						let count = 1;
						ketqua.forEach(t => {
							if (t == e.name) count++;
						})
						win += e.bet*(count-1);
						await increaseMoney(i, e.bet*count);
					}
				});
				msg += (win - lose >= 0) ? " +" : " ";
				msg += `${win - lose}$`;
				win = 0, lose = 0;
			}
			sendTC({
				body: getText("final"),
				attachment: bcatm
			}, () => sendTC(msg, () => delete global.client.baucua[threadID]));
			return;
		};
		case "end": {
			if (!global.client.baucua[threadID]) return send(getText("noGame"));
			if (global.client.baucua[threadID].author != senderID) return send(getText("notAuthor"));
			sendTC(getText("closed"), () => delete global.client.baucua[threadID]);
		}
		default: {
			if (!["nai","b·∫ßu","bau","g√†","ga","t√¥m","tom","cua","c√°","ca"].includes(args[0])) return send(getText("unknown", prefix, this.config.name));
			if (!global.client.baucua[threadID]) return send(getText("noGame"));
			if (args.length < 2) return send(getText("wrongInput"));
			moneyBet = parseInt(args[1]);
		    if (isNaN(moneyBet) || moneyBet <= 0) return send(getText("missingInput"));
			if (moneyBet > moneyUser) return send(getText("moneyBetNotEnough"));
			if (moneyBet < 50) return send(getText("limitBet"));
			if (threadID in global.client.baucua) {
				if (global.client.baucua[threadID].status == "pending") {
					let luachon = args[0].toLowerCase();
					if (!["nai","b·∫ßu","bau","g√†","ga","t√¥m","tom","cua","c√°","ca"].includes(luachon)) return send(getText("wrongInput"));
					if (["b·∫ßu","bau"].includes(luachon)) luachon = "b·∫ßu";
					if (["g√†","ga"].includes(luachon)) luachon = "g√†";
					if (["t√¥m","tom"].includes(luachon)) luachon = "t√¥m";
					if (["c√°","ca"].includes(luachon)) luachon = "c√°";
					if (!global.client.baucua[threadID].data[senderID]) {
						global.client.baucua[threadID].players++;
						global.client.baucua[threadID].data[senderID] = [];
					};
					if (global.client.baucua[threadID].data[senderID] && global.client.baucua[threadID].data[senderID].find(e => e.name == luachon)) return send(getText("alreadyBet"));
					sendC(getText("betSuccess", moneyBet, luachon), () => {
						decreaseMoney(senderID, moneyBet);
						global.client.baucua[threadID].data[senderID].push({
							name: luachon,
							bet: moneyBet
						})
					});
				}
			}
			return;
		}
	}
}
